# --------------------------------------------------------------------
# Copyright (c) 2022, WSO2 Inc. (http://wso2.com) All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# -----------------------------------------------------------------------

---
apiVersion: v1
kind: Namespace
metadata:
  name: gateway-system
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  name: gateway-api-admission
webhooks:
  - name: validate.gateway.networking.k8s.io
    matchPolicy: Equivalent
    rules:
      - operations: [ "CREATE" , "UPDATE" ]
        apiGroups: [ "gateway.networking.k8s.io" ]
        apiVersions: [ "v1alpha2" ]
        resources: [ "gateways", "gatewayclasses", "httproutes" ]
    failurePolicy: Fail
    sideEffects: None
    admissionReviewVersions:
      - v1
    clientConfig:
      service:
        name: gateway-api-admission-server
        namespace: gateway-system
        path: "/validate"
---
apiVersion: v1
kind: Service
metadata:
  labels:
    name: gateway-api-webhook-server
  name: gateway-api-admission-server
  namespace: gateway-system
spec:
  type: ClusterIP
  ports:
    - name: https-webhook
      port: 443
      targetPort: 8443
  selector:
    name: gateway-api-admission-server
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gateway-api-admission-server
  namespace: gateway-system
  labels:
    name: gateway-api-admission-server
spec:
  replicas: 1
  selector:
    matchLabels:
      name: gateway-api-admission-server
  template:
    metadata:
      name: gateway-api-admission-server
      labels:
        name: gateway-api-admission-server
    spec:
      containers:
        - name: webhook
          image: gcr.io/k8s-staging-gateway-api/admission-server:v0.5.0
          imagePullPolicy: Always
          args:
            - -logtostderr
            - --tlsCertFile=/etc/certs/cert
            - --tlsKeyFile=/etc/certs/key
            - -v=10
            - 2>&1
          ports:
            - containerPort: 8443
              name: webhook
          resources:
            limits:
              memory: 50Mi
              cpu: 100m
            requests:
              memory: 50Mi
              cpu: 100m
          volumeMounts:
            - name: webhook-certs
              mountPath: /etc/certs
              readOnly: true
          securityContext:
            readOnlyRootFilesystem: true
      volumes:
        - name: webhook-certs
          secret:
            secretName: gateway-api-admission
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: gateway-api-admission
  labels:
    name: gateway-api-webhook
  namespace: gateway-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: gateway-api-admission
  labels:
    name: gateway-api
rules:
  - apiGroups:
      - admissionregistration.k8s.io
    resources:
      - validatingwebhookconfigurations
    verbs:
      - get
      - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: gateway-api-admission
  annotations:
  labels:
    name: gateway-api-webhook
  namespace: gateway-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: gateway-api-admission
subjects:
  - kind: ServiceAccount
    name: gateway-api-admission
    namespace: gateway-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: gateway-api-admission
  annotations:
  labels:
    name: gateway-api-webhook
  namespace: gateway-system
rules:
  - apiGroups:
      - ''
    resources:
      - secrets
    verbs:
      - get
      - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: gateway-api-admission
  annotations:
  labels:
    name: gateway-api-webhook
  namespace: gateway-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: gateway-api-admission
subjects:
  - kind: ServiceAccount
    name: gateway-api-admission
    namespace: gateway-system
---
apiVersion: batch/v1
kind: Job
metadata:
  name: gateway-api-admission
  annotations:
  labels:
    name: gateway-api-webhook
  namespace: gateway-system
spec:
  template:
    metadata:
      name: gateway-api-admission-create
      labels:
        name: gateway-api-webhook
    spec:
      containers:
        - name: create
          image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1
          imagePullPolicy: IfNotPresent
          args:
            - create
            - --host=gateway-api-admission-server,gateway-api-admission-server.gateway-system.svc
            - --namespace=gateway-system
            - --secret-name=gateway-api-admission
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
      restartPolicy: OnFailure
      serviceAccountName: gateway-api-admission
      securityContext:
        runAsNonRoot: true
        runAsUser: 2000
---
apiVersion: batch/v1
kind: Job
metadata:
  name: gateway-api-admission-patch
  labels:
    name: gateway-api-webhook
  namespace: gateway-system
spec:
  template:
    metadata:
      name: gateway-api-admission-patch
      labels:
        name: gateway-api-webhook
    spec:
      containers:
        - name: patch
          image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1
          imagePullPolicy: IfNotPresent
          args:
            - patch
            - --webhook-name=gateway-api-admission
            - --namespace=gateway-system
            - --patch-mutating=false
            - --patch-validating=true
            - --secret-name=gateway-api-admission
            - --patch-failure-policy=Fail
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
      restartPolicy: OnFailure
      serviceAccountName: gateway-api-admission
      securityContext:
        runAsNonRoot: true
        runAsUser: 2000
---
apiVersion: v1
kind: Namespace
metadata:
  labels:
    control-plane: envoy-gateway
  name: envoy-gateway-system
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: certgen
  namespace: envoy-gateway-system
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: envoy-gateway
  namespace: envoy-gateway-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: certgen
  namespace: envoy-gateway-system
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - create
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: infra-manager
  namespace: envoy-gateway-system
rules:
- apiGroups:
  - ""
  resources:
  - serviceaccounts
  - services
  verbs:
  - create
  - get
  - update
  - delete
- apiGroups:
  - apps
  resources:
  - deployments
  verbs:
  - create
  - get
  - update
  - delete
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: leader-election-role
  namespace: envoy-gateway-system
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  name: envoy-gateway-role
rules:
- apiGroups:
  - ""
  resources:
  - namespaces
  - secrets
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apps
  resources:
  - deployments
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - gateway.networking.k8s.io
  resources:
  - gatewayclasses
  - gateways
  - httproutes
  - referencegrants
  - referencepolicies
  verbs:
  - get
  - list
  - update
  - watch
- apiGroups:
  - gateway.networking.k8s.io
  resources:
  - gatewayclasses/status
  - gateways/status
  - httproutes/status
  verbs:
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: metrics-reader
rules:
- nonResourceURLs:
  - /metrics
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: proxy-role
rules:
- apiGroups:
  - authentication.k8s.io
  resources:
  - tokenreviews
  verbs:
  - create
- apiGroups:
  - authorization.k8s.io
  resources:
  - subjectaccessreviews
  verbs:
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: certgen
  namespace: envoy-gateway-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: certgen
subjects:
- kind: ServiceAccount
  name: certgen
  namespace: envoy-gateway-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: infra-manager
  namespace: envoy-gateway-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: infra-manager
subjects:
- kind: ServiceAccount
  name: envoy-gateway
  namespace: envoy-gateway-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: leader-election-rolebinding
  namespace: envoy-gateway-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: leader-election-role
subjects:
- kind: ServiceAccount
  name: envoy-gateway
  namespace: envoy-gateway-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: envoy-gateway-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: envoy-gateway-role
subjects:
- kind: ServiceAccount
  name: envoy-gateway
  namespace: envoy-gateway-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: proxy-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: proxy-role
subjects:
- kind: ServiceAccount
  name: envoy-gateway
  namespace: envoy-gateway-system
---
apiVersion: v1
data:
  envoy-gateway.yaml: |
    apiVersion: config.gateway.envoyproxy.io/v1alpha1
    kind: EnvoyGateway
    provider:
      type: Kubernetes
      gateway:
        controllerName: gateway.envoyproxy.io/gatewayclass-controller
kind: ConfigMap
metadata:
  name: envoy-gateway-config
  namespace: envoy-gateway-system
---
apiVersion: v1
kind: Service
metadata:
  labels:
    control-plane: envoy-gateway
  name: envoy-gateway
  namespace: envoy-gateway-system
spec:
  ports:
  - name: grpc
    port: 18000
    targetPort: 18000
  selector:
    control-plane: envoy-gateway
---
apiVersion: v1
kind: Service
metadata:
  labels:
    control-plane: envoy-gateway
  name: envoy-gateway-metrics-service
  namespace: envoy-gateway-system
spec:
  ports:
  - name: https
    port: 8443
    protocol: TCP
    targetPort: https
  selector:
    control-plane: envoy-gateway
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    control-plane: envoy-gateway
  name: envoy-gateway
  namespace: envoy-gateway-system
spec:
  replicas: 1
  selector:
    matchLabels:
      control-plane: envoy-gateway
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: envoy-gateway
      labels:
        control-plane: envoy-gateway
    spec:
      containers:
      - args:
        - server
        - --config-path=/config/envoy-gateway.yaml
        env:
        - name: ENVOY_GATEWAY_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        image: envoyproxy/gateway:v0.2.0-rc2
        imagePullPolicy: Always
        name: envoy-gateway
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 10m
            memory: 64Mi
        securityContext:
          allowPrivilegeEscalation: false
        volumeMounts:
        - mountPath: /config
          name: envoy-gateway-config
          readOnly: true
        - mountPath: /certs
          name: certs
          readOnly: true
      - args:
        - --secure-listen-address=0.0.0.0:8443
        - --upstream=http://127.0.0.1:8080/
        - --logtostderr=true
        - --v=0
        image: gcr.io/kubebuilder/kube-rbac-proxy:v0.11.0
        name: kube-rbac-proxy
        ports:
        - containerPort: 8443
          name: https
          protocol: TCP
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 5m
            memory: 64Mi
      securityContext:
        runAsNonRoot: true
      serviceAccountName: envoy-gateway
      terminationGracePeriodSeconds: 10
      volumes:
      - configMap:
          defaultMode: 420
          name: envoy-gateway-config
        name: envoy-gateway-config
      - name: certs
        secret:
          secretName: envoy-gateway
---
apiVersion: batch/v1
kind: Job
metadata:
  name: certgen
  namespace: envoy-gateway-system
spec:
  backoffLimit: 1
  completions: 1
  parallelism: 1
  template:
    metadata:
      labels:
        app: certgen
    spec:
      containers:
      - command:
        - envoy-gateway
        - certgen
        image: envoyproxy/gateway:v0.2.0-rc2
        imagePullPolicy: Always
        name: envoy-gateway-certgen
      restartPolicy: Never
      securityContext:
        runAsGroup: 65534
        runAsNonRoot: true
        runAsUser: 65534
      serviceAccountName: certgen
  ttlSecondsAfterFinished: 0
